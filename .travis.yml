# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: c

os:
    - linux

# The apt packages below are needed for sphinx builds. A full list of packages
# that can be included can be found here:
#
# https://github.com/travis-ci/apt-package-whitelist/blob/master/ubuntu-precise

addons:
    apt:
        packages:
            - graphviz


stage: Comprehensive tests

stages:
   # Do the style check and a single test job, don't proceed if it fails
   - name: Initial tests
   # Test docs, astropy dev, and without optional dependencies
   - name: Comprehensive tests
   # These will only run when cron is opted in
   - name: Cron tests
     if: type = cron


env:
    global:
        # The following versions are the 'default' for tests, unless
        # overridden underneath. They are defined here in order to save having
        # to repeat them for all configurations.
        - PYTHON_VERSION=3.7
        - NUMPY_VERSION=stable
        - ASTROPY_VERSION=stable
        - MAIN_CMD='python setup.py'
        - SETUP_CMD='test'
        - EVENT_TYPE='pull_request push'

        
        # List runtime dependencies for the package that are available as conda
        # packages here.
        - CONDA_DEPENDENCIES=''
        - CONDA_DEPENDENCIES_DOC='sphinx-astropy'
        
        # List other runtime dependencies for the package that are available as
        # pip packages here.
        - PIP_DEPENDENCIES=''

        # Conda packages for affiliated packages are hosted in channel
        # "astropy" while builds for astropy LTS with recent numpy versions
        # are in astropy-ci-extras. If your package uses either of these,
        # add the channels to CONDA_CHANNELS along with any other channels
        # you want to use.
        - CONDA_CHANNELS='astropy'

        # If there are matplotlib or other GUI tests, uncomment the following
        # line to use the X virtual framebuffer.
        # - SETUP_XVFB=True

        # If you want to ignore certain flake8 errors, you can list them
        # in FLAKE8_OPT, for example:
        # - FLAKE8_OPT='--ignore=E501'
        - FLAKE8_OPT=''

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:
        # Make sure that egg_info works without dependencies
        - stage: Initial tests
          env: PYTHON_VERSION=3.7 SETUP_CMD='egg_info'

        # Check for sphinx doc build warnings - we do this first because it
        # may run for a long time
        - os: linux
          env: SETUP_CMD='build_docs -w'
               CONDA_DEPENDENCIES=$CONDA_DEPENDENCIES_DOC

        - os: linux
          name: "Main Test"
          


    allow_failures:
        # Do a PEP8 test with flake8
        # (do allow to fail unless your code completely compliant)
        # - os: linux
        #   stage: Initial tests
        #   env: MAIN_CMD='flake8 dsii_dwarfs --count --show-source --statistics $FLAKE8_OPT' SETUP_CMD=''

install:

    # We now use the ci-helpers package to set up our testing environment.
    # This is done by using Miniconda and then using conda and pip to install
    # dependencies. Which dependencies are installed using conda and pip is
    # determined by the CONDA_DEPENDENCIES and PIP_DEPENDENCIES variables,
    # which should be space-delimited lists of package names. See the README
    # in https://github.com/astropy/ci-helpers for information about the full
    # list of environment variables that can be used to customize your
    # environment. In some cases, ci-helpers may not offer enough flexibility
    # in how to install a package, in which case you can have additional
    # commands in the install: section below.

    - git clone --depth 1 git://github.com/astropy/ci-helpers.git
    - source ci-helpers/travis/setup_conda.sh

    # As described above, using ci-helpers, you should be able to set up an
    # environment with dependencies installed using conda and pip, but in some
    # cases this may not provide enough flexibility in how to install a
    # specific dependency (and it will not be able to install non-Python
    # dependencies). Therefore, you can also include commands below (as
    # well as at the start of the install section or in the before_install
    # section if they are needed before setting up conda) to install any
    # other dependencies.
    - pip install -r requirements.txt

before_script:
    - export DSII_DWARFS_DATA=$TRAVIS_BUILD_DIR/dsii_dwarfs/data

    # Get WFI data files
    - wget https://stsci.box.com/shared/static/jsscyxpkkuckuj96zdzh428r5ozpzpl1.txz -O $TRAVIS_BUILD_DIR/dsii_dwarfs/data/MIST_v1.2_vvcrit0.4_WFIRST.txz
    - tar -xzvf $TRAVIS_BUILD_DIR/dsii_dwarfs/data/MIST_v1.2_vvcrit0.4_WFIRST.txz --directory $TRAVIS_BUILD_DIR/dsii_dwarfs/data/.

    # Get HSC data files
    - wget https://stsci.box.com/shared/static/18l1syy5vzn5svdb9afkgomunjuucc68.gz -O $TRAVIS_BUILD_DIR/dsii_dwarfs/data/MIST_v1.2_vvcrit0.4.tar.gz
    - tar -xzvf $TRAVIS_BUILD_DIR/dsii_dwarfs/data/MIST_v1.2_vvcrit0.4.tar.gz --directory $TRAVIS_BUILD_DIR/dsii_dwarfs/data/.

    # Webb PSF 0.9.1
    - wget https://stsci.box.com/shared/static/qcptcokkbx7fgi3c00w2732yezkxzb99.gz -O /tmp/minimal-webbpsf-data.tar.gz
    - tar -xzvf /tmp/minimal-webbpsf-data.tar.gz
    - export WEBBPSF_PATH="${TRAVIS_BUILD_DIR}/webbpsf-data"

script:
   - $MAIN_CMD $SETUP_CMD

after_success:
    # If coveralls.io is set up for this package, uncomment the line below.
    # The coveragerc file may be customized as needed for your package.
    # - if [[ $SETUP_CMD == *coverage* ]]; then coveralls --rcfile='dsii_dwarfs/tests/coveragerc'; fi
